

src/
├── main.cpp          # 程序入口
├── Crypto.h/cpp      # 加密算法实现
├── FileHandler.h/cpp # 文件操作
└── Menu.h/cpp        # 用户界面



# 在终端中执行
mkdir -p week2_crypto_tool/src
cd week2_crypto_tool

# 在week2_crypto_tool目录下创建CMakeLists.txt
touch CMakeLists.txt

cmake_minimum_required(VERSION 3.10)
project(CryptoTool)

# 设置C++标准
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 设置可执行文件输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# 创建可执行文件
add_executable(CryptoTool
    src/main.cpp
    src/Crypto.cpp
    src/FileHandler.cpp
    src/Menu.cpp
)

target_include_directories(CryptoTool PRIVATE src)

touch src/Crypto.h
class Crypto {
public:
    string caesarEncrypt(const string& text, int key);
    string caesarDecrypt(const string& text, int key);
    string xorEncrypt(const string& text, const string& key);
    string xorDecrypt(const string& text, const string& key);
};       //const string&: 常量引用参数，避免拷贝，保护原数据



touch src/FileHandler.h
class FileHandler {
public:
    string readFile(const string& filename);
    bool writeFile(const string& filename, const string& content);
};





touch src/Menu.h
class Menu {
private:
    Crypto crypto;
    FileHandler fileHandler;
    
public:
    void showMenu();
    void handleTextEncryption();
    void handleTextDecryption();
    void handleFileEncryption();
    void handleFileDecryption();
};

#include<iostream>
#include<string>
using namespace std;



//Crypto类: 只负责加密解密算法
//FileHandler类: 只负责文件IO操作
//Menu类: 只负责用户界面交互





touch src/main.cpp
int main(){
    #include <iostream>
#include "Menu.h"

int main() {
    
    try {
        Menu menu;
        menu.run();
    } catch (const std::exception& e) {
        std::cerr << "程序发生错误: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
